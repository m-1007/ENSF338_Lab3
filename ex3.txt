#3.1: Derive the formulas for 
    # (i) number of comparisons, and 
    # (ii) average-case number of swaps for bubble sort

#Bubble Sort:
# In each pass through the array, adjacent elements are compared, and if they are in the wrong order, they are swapped.
# In the worst-case scenario, the array is sorted in reverse order, 
    # requiring n - 1 comparisons and swaps in the first pass, n - 2 in the second pass, and so on until the array is fully sorted.
# In the best-case scenario, the array is already sorted, requiring only n - 1 comparisons and 0 swaps in the first pass. 
# No further swaps are needed since the array is already sorted after the first pass.
# In the average-case scenario, each element has a probability of 0.5 of being in the wrong order with its adjacent element. 
# Therefore, the average number of comparisons can be approximated as (n - 1) / 2.

#3.4: The number of comparisons shows a linear relationship with the input size, consistent with the average-case complexity of O(n^2) for bubble sort.
# The number of swaps also exhibits a similar linear relationship with the input size, indicating that bubble sort typically performs a quadratic number of swaps in the average case.
# The plots match the expected complexity analysis for bubble sort, confirming that the algorithm's performance aligns with its theoretical complexity.
